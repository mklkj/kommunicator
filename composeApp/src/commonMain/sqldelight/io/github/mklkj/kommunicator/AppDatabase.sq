import kotlin.Boolean;
import kotlinx.datetime.Instant;
import kotlinx.uuid.UUID;

-- USERS

CREATE TABLE Users (
    id TEXT AS UUID NOT NULL PRIMARY KEY,
    email TEXT NOT NULL,
    username TEXT NOT NULL,
    token TEXT NOT NULL,
    refreshToken TEXT NOT NULL,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    avatarUrl TEXT NOT NULL DEFAULT ''
);

insertUser:
INSERT INTO Users(id, email, username, token, refreshToken, firstName, lastName, avatarUrl)
VALUES(?, ?, ?, ?, ?, ?,?, ?);

updateUserTokens:
UPDATE Users SET token = ?, refreshToken=? WHERE id = ?;

removeAllUsers:
DELETE FROM Users;

selectAllUsers:
SELECT Users.* FROM Users;

-- CONTACTS

CREATE TABLE Contacts (
    id TEXT AS UUID NOT NULL PRIMARY KEY,
    userId TEXT AS UUID NOT NULL,
    contactUserId TEXT AS UUID NOT NULL,
    avatarUrl TEXT NOT NULL,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    username TEXT NOT NULL,
    isActive INTEGER AS Boolean NOT NULL
);

insertContact:
INSERT INTO Contacts(id, userId, contactUserId, avatarUrl, firstName, lastName, username, isActive)
VALUES(?, ?, ?, ?, ?, ?, ?, ?);

removeAllContacts:
DELETE FROM Contacts WHERE userId = ?;

selectAllContacts:
SELECT Contacts.* FROM Contacts WHERE userId = ?;

-- CHATS

CREATE TABLE Chats (
    id TEXT AS UUID NOT NULL PRIMARY KEY,
    userId TEXT AS UUID NOT NULL,
    customName TEXT,
    avatarUrl TEXT NOT NULL
);

insertChat:
INSERT OR REPLACE INTO Chats(id, userId, customName, avatarUrl)
VALUES(?, ?, ?, ?);

selectChat:
SELECT * FROM Chats WHERE id = ?;

selectAllChats:
SELECT
    Chat.id AS chatId, Chat.customName AS chatCustomName, Chat.avatarUrl,
    Messages.id AS lastMessageId, Messages.authorId, Messages.createdAt, Messages.content,
    Participants.id AS lastMessageAuthorId, Participants.avatarUrl, Participants.customName AS lastMessageAuthorCustomName, Participants.firstname, Participants.lastName
FROM (
    SELECT Chats.*, (
            SELECT id
            FROM Messages
            WHERE Chats.id = Messages.chatId
            ORDER BY createdAt DESC
        ) AS messageId
    FROM Chats
) Chat
JOIN Messages ON Chat.messageId = Messages.id
JOIN Participants ON Participants.id = Messages.authorId
WHERE Chat.userId = ?;

-- PARTICIPANTS

CREATE TABLE Participants(
    id TEXT AS UUID NOT NULL PRIMARY KEY,
    userId TEXT AS UUID NOT NULL,
    chatId TEXT AS UUID NOT NULL,
    customName TEXT,
    firstname TEXT NOT NULL,
    lastName TEXT NOT NULL,
    avatarUrl TEXT NOT NULL
);

insertParticipant:
INSERT OR REPLACE INTO Participants(id, userId, chatId, customName, firstname, lastName, avatarUrl)
VALUES(?, ?, ?, ?, ?, ?, ?);

selectParticipantByUserId:
SELECT * FROM Participants WHERE userId = ? AND chatId = ?;

-- MESSAGES

CREATE TABLE Messages (
    id TEXT AS UUID NOT NULL PRIMARY KEY,
    chatId TEXT AS UUID NOT NULL,
    authorId TEXT AS UUID NOT NULL,
    createdAt TEXT AS Instant NOT NULL,
    content TEXT NOT NULL
);

insertMessage:
INSERT OR REPLACE INTO Messages(id, chatId, authorId, createdAt, content)
VALUES(?, ?, ?, ?, ?);

selectMessages:
SELECT Messages.*, Participants.userId, Participants.firstname, Participants.lastName, Participants.customName, Participants.avatarUrl
FROM Messages
LEFT JOIN Participants ON Messages.authorId = Participants.id
WHERE Messages.chatId = ?
ORDER BY Messages.createdAt DESC;
